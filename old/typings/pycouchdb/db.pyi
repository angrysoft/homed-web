"""
This type stub file was generated by pyright.
"""

from .connections import Connection
from .query import FindQuery, IndexQuery
from typing import Any, Dict, Iterator, List, Tuple

class Database:
    def __init__(self, name: str, connection: Connection) -> None:
        """Class for db operations

        Args:
            name (str): Database name
            connection (Connection): instance of connection to server
        """
        ...
    def doc_info(self, doc_id: str) -> Dict[str, Any]:
        """Minimal amount of information about the specified document.

        Args:
            docid (str): Document ID.

        Returns:
            dict: Dictionary with keys rev - revision, size - size of document , date

        Raises:
            DatabaseError
        """
        ...
    def add(self, doc: Dict[Any, Any]) -> Tuple[str, str]:
        """Creates a new document in database

        Args:
            doc (dict): Document ID.

        Returns:
            tuple: document id, revision

        Raises:
            DatabaseError

        """
        ...
    def add_batch(self, doc: Dict[Any, Any]):
        """write documents to the database at a higher rate by using the
        batch option. This collects document writes together in memory
        (on a per-user basis) before they are committed to disk.
        This increases the risk of the documents not being stored in
        the event of a failure, since the documents are not written
        to disk immediately."""
        ...
    def add_many(self, docs: List[Dict[Any, Any]]): ...
    def get(
        self,
        doc_id: str,
        attachments: bool = ...,
        att_encoding_info: bool = ...,
        atts_since: List[str] = ...,
        conflicts: bool = ...,
        deleted_conflicts: bool = ...,
        latest: bool = ...,
        rev: str = ...,
        revs: bool = ...,
    ) -> Dict[str, Any]:
        """Get document by id

        Args:
            doc_id (str): Document ID
            attachments (bool): Includes attachments bodies in response.Default is false
            att_encoding_info (bool): Includes encoding

        Returns:
            Document

        Raises:
            DatabaseError
        """
        ...
    def get_many(self, ids: List[Dict[str, str]]) -> List[Dict[Any, Any]]:
        """Get document list

        Args:
            ids (list): list of dict {'id': 'someid'}

        Returns:
            list: Document list

        Raises:
            DatabaseError
        """
        ...
    def update(
        self, doc_id: str, doc: Dict[str, Any], rev: str = ...
    ) -> Tuple[str, str]:
        """Update document in database

        Args:
            doc_id (str): Document ID.
            doc(dict): Document
            rev(str): Document’s revision if updating an existing document.

        Returns:
            tuple: document id, revision

        Raises:
            DatabaseError

        """
        ...
    def update_many(self, docs_list: List[Dict[str, str]]): ...
    def delete(self, doc_id: str, rev: str = ...) -> Tuple[str, str]:
        """Marks the specified document as deleted

        Args:
            doc_id (str): Document ID

        Return:
            tuple: document id rev

        Raises:
            DatabaseError
        """
        ...
    def list_documents(self) -> List[Dict[str, Any]]:
        """List all documents names in database

        Return:
            list: Document names"""
        ...
    def get_all_docs(self) -> Iterator[Dict[str, Any]]:
        """Returns iterator for all documents in database

        Yields:
            dict: Document
        """
        ...
    def find(self, query: FindQuery): ...
    def set_index(self, index: IndexQuery) -> Dict[str, str]:
        """Create a new index on a database

        Args:
            index (IndexQuery): see IndexQuery documentation for details

        Raises:
            DatabaseError:

        Returns:
            Dict[str,str]: dict with keys result with status of creating index, id of index , and index name
        """
        ...
    def get_indexes(self) -> Dict[str, Any]:
        """Get a list of all indexes in the database.
        In addition to the information available through this API,
        indexes are also stored in design documents <index-functions>.
        Design documents are regular documents that have an ID starting with _design/.
        Design documents can be retrieved and modified in the same way as any other document,
        although this is not necessary when using Mango.

        Return:
            dict: total_rows (int) – Number of indexes
                  indexes (list) – Array of index definitions

        Raises:
            DatabaseError"""
        ...
    def delete_index(self, design: str, name: str = ...) -> Dict[str, bool]:
        """Delete index
        Args:
            design (str): Design Document ID starting with _design/
            name (str): Name of index

        Return:
            dict: for example {"ok": true}

        Raises:
            DatabaseError"""
        ...
    def purge(self, docinfo: Dict[str, List[str]]):
        """A database purge permanently removes the references to documents in the database.
        Normal deletion of a document within CouchDB does not remove the document from the database,
        instead, the document is marked as _deleted=true (and a new revision is created).
        This is to ensure that deleted documents can be replicated to other databases as having been deleted.
        This also means that you can check the status of a document and identify that the document has been deleted by its absence.
        The purge request must include the document IDs, and for each document ID, one or more revisions that must be purged.
        Documents can be previously deleted, but it is not necessary. Revisions must be leaf revisions.
        """
        ...
    def get_design_docs(self): ...
    def __contains__(self, item: str): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __getitem__(self, item: str): ...
    def __setitem__(self, key: str, value: Any): ...
