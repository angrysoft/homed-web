"""
This type stub file was generated by pyright.
"""

import logging
import ssl

TRACE_LOG_LEVEL = 5
LOG_LEVELS = {
    "critical": logging.CRITICAL,
    "error": logging.ERROR,
    "warning": logging.WARNING,
    "info": logging.INFO,
    "debug": logging.DEBUG,
    "trace": TRACE_LOG_LEVEL,
}
HTTP_PROTOCOLS = {
    "auto": "uvicorn.protocols.http.auto:AutoHTTPProtocol",
    "h11": "uvicorn.protocols.http.h11_impl:H11Protocol",
    "httptools": "uvicorn.protocols.http.httptools_impl:HttpToolsProtocol",
}
WS_PROTOCOLS = {
    "auto": "uvicorn.protocols.websockets.auto:AutoWebSocketsProtocol",
    "none": None,
    "websockets": "uvicorn.protocols.websockets.websockets_impl:WebSocketProtocol",
    "wsproto": "uvicorn.protocols.websockets.wsproto_impl:WSProtocol",
}
LIFESPAN = {
    "auto": "uvicorn.lifespan.on:LifespanOn",
    "on": "uvicorn.lifespan.on:LifespanOn",
    "off": "uvicorn.lifespan.off:LifespanOff",
}
LOOP_SETUPS = {
    "none": None,
    "auto": "uvicorn.loops.auto:auto_loop_setup",
    "asyncio": "uvicorn.loops.asyncio:asyncio_setup",
    "uvloop": "uvicorn.loops.uvloop:uvloop_setup",
}
INTERFACES = ["auto", "asgi3", "asgi2", "wsgi"]
SSL_PROTOCOL_VERSION = getattr(ssl, "PROTOCOL_TLS", ssl.PROTOCOL_SSLv23)
LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "()": "uvicorn.logging.DefaultFormatter",
            "fmt": "%(levelprefix)s %(message)s",
            "use_colors": None,
        },
        "access": {
            "()": "uvicorn.logging.AccessFormatter",
            "fmt": '%(levelprefix)s %(client_addr)s - "%(request_line)s" %(status_code)s',
        },
    },
    "handlers": {
        "default": {
            "formatter": "default",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stderr",
        },
        "access": {
            "formatter": "access",
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
        },
    },
    "loggers": {
        "uvicorn": {"handlers": ["default"], "level": "INFO"},
        "uvicorn.error": {"level": "INFO"},
        "uvicorn.access": {"handlers": ["access"], "level": "INFO", "propagate": False},
    },
}
logger = logging.getLogger("uvicorn.error")

def create_ssl_context(
    certfile, keyfile, password, ssl_version, cert_reqs, ca_certs, ciphers
): ...

class Config:
    def __init__(
        self,
        app,
        host=...,
        port=...,
        uds=...,
        fd=...,
        loop=...,
        http=...,
        ws=...,
        lifespan=...,
        env_file=...,
        log_config=...,
        log_level=...,
        access_log=...,
        use_colors=...,
        interface=...,
        debug=...,
        reload=...,
        reload_dirs=...,
        reload_delay=...,
        workers=...,
        proxy_headers=...,
        forwarded_allow_ips=...,
        root_path=...,
        limit_concurrency=...,
        limit_max_requests=...,
        backlog=...,
        timeout_keep_alive=...,
        timeout_notify=...,
        callback_notify=...,
        ssl_keyfile=...,
        ssl_certfile=...,
        ssl_keyfile_password=...,
        ssl_version=...,
        ssl_cert_reqs=...,
        ssl_ca_certs=...,
        ssl_ciphers=...,
        headers=...,
        factory=...,
    ) -> None: ...
    @property
    def asgi_version(self) -> str: ...
    @property
    def is_ssl(self) -> bool: ...
    def configure_logging(self): ...
    def load(self): ...
    def setup_event_loop(self): ...
    def bind_socket(self): ...
    @property
    def should_reload(self): ...
